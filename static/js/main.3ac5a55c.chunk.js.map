{"version":3,"sources":["components/pdfExporter.js","components/PageContainer.js","App.js","serviceWorker.js","index.js"],"names":["ExportPDF","props","doc","jsPDF","fromHTML","body","className","onClick","save","PageContainer","toggleBlockType","blockType","onChange","RichUtils","state","editorState","console","log","editorContentHtml","setState","stateToHTML","getCurrentContent","handleKeyCommand","command","newState","EditorState","createEmpty","this","toolbarClassName","wrapperClassName","editorClassName","onEditorStateChange","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oSAceA,G,OAVG,SAACC,GACf,IAAIC,EAAM,IAAIC,IAEd,OADAD,EAAIE,SAASH,EAAMI,KAAM,EAAG,GAExB,6BACA,4BAAQC,UAAU,SAASC,QAAS,kBAAIL,EAAIM,KAAK,cAAa,yCCkDvDC,E,kDAjDb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IAMRS,gBAAkB,SAAAC,GAChB,EAAKC,SAASC,YAAUH,gBAAgB,EAAKI,MAAMC,YAAaJ,KAR/C,EAWnBC,SAAW,SAAAG,GACTC,QAAQC,IAAI,EAAKH,MAAMI,mBACvB,EAAKC,SAAS,CACZJ,cACAG,kBAAmBE,YAAYL,EAAYM,wBAf5B,EAmBnBC,iBAAmB,SAAAC,GACjB,IAAMC,EAAWX,YAAUS,iBACzB,EAAKR,MAAMC,YACXQ,GAEF,OAAIC,GACF,EAAKZ,SAASY,GACP,WAEF,eA1BP,EAAKV,MAAQ,CACXC,YAAaU,cAAYC,eAHV,E,qDAgCjB,OACE,yBAAKpB,UAAU,mBACb,yBAAKA,UAAU,WACb,kBAAC,SAAD,CACAS,YAAaY,KAAKb,MAAMC,YACxBa,iBAAiB,mBACjBC,iBAAiB,mBACjBC,gBAAgB,kBAChBC,oBAAqBJ,KAAKf,YAG5B,kBAAC,EAAD,CAAWP,KAAMsB,KAAKb,MAAMI,yB,GA5CRc,IAAMC,WCKnBC,E,uKARX,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,W,GAJU2B,aCQEE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.3ac5a55c.chunk.js","sourcesContent":["import React from 'react';\nimport jsPDF from 'jspdf';\nimport \"./exporter.css\";\n\nconst ExportPDF = (props)=>{\n    var doc = new jsPDF();\n    doc.fromHTML(props.body, 1, 1)\n    return (\n        <div>\n        <button className=\"button\" onClick={()=>doc.save(\"name.pdf\")}><span>PDF</span></button>\n        </div>\n    )\n}\n\nexport default ExportPDF;","import React from \"react\";\n/*import Editor from 'draft-js-plugins-editor';*/\nimport {/** Editor, */EditorState, RichUtils } from \"draft-js\";\nimport \"../App.css\";\nimport { Editor } from 'react-draft-wysiwyg';\nimport 'react-draft-wysiwyg/dist/react-draft-wysiwyg.css';\nimport { stateToHTML } from \"draft-js-export-html\";\nimport HtmlToPdf from './pdfExporter';\n\nclass PageContainer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editorState: EditorState.createEmpty(),\n    };\n  }\n\n  toggleBlockType = blockType => {\n    this.onChange(RichUtils.toggleBlockType(this.state.editorState, blockType));\n  };\n\n  onChange = editorState => {\n    console.log(this.state.editorContentHtml)\n    this.setState({\n      editorState,\n      editorContentHtml: stateToHTML(editorState.getCurrentContent())\n      });\n  };\n\n  handleKeyCommand = command => {\n    const newState = RichUtils.handleKeyCommand(\n      this.state.editorState,\n      command\n    );\n    if (newState) {\n      this.onChange(newState);\n      return \"handled\";\n    }\n    return \"not-handled\";\n  };\n\n  render() {\n    return (\n      <div className=\"editorContainer\">\n        <div className=\"editors\">\n          <Editor\n          editorState={this.state.editorState}\n          toolbarClassName=\"toolbarClassName\"\n          wrapperClassName=\"wrapperClassName\"\n          editorClassName=\"editorClassName\"\n          onEditorStateChange={this.onChange}\n          />\n        </div>\n        <HtmlToPdf body={this.state.editorContentHtml}/>\n      </div>\n    );\n  }\n}\n\nexport default PageContainer;","import React, { Component } from 'react';\nimport './App.css';\nimport PageContainer from './components/PageContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <PageContainer/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}